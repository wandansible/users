---
- name: Create user {{ item.username }}
  ansible.builtin.user:
    append: "{{ item.append | default(omit) }}"
    comment: "{{ item.name | default(omit) }}"
    create_home: "{{ item.create_home | default(omit) }}"
    expires: "{{ item.expires | default(omit) }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    groups: "{{ item.groups | default(omit) }}"
    home: "{{ item.home | default(omit) }}"
    name: "{{ item.username }}"
    password: "{{ item.password | default(omit) }}"
    password_expire_max: "{{ item.password_expire_max | default(omit) }}"
    password_expire_min: "{{ item.password_expire_min | default(omit) }}"
    password_lock: "{{ item.password_lock | default(omit) }}"
    shell: "{{ item.shell | default(omit) }}"
    ssh_key_bits: "{{ item.ssh_key_bits | default(omit) }}"
    ssh_key_comment: "{{ item.ssh_key_comment | default(omit) }}"
    ssh_key_file: ".ssh/id_{{ item.ssh_key_type | default('ed25519') }}"
    ssh_key_passphrase: "{{ item.ssh_key_passphrase | default(omit) }}"
    ssh_key_type: "{{ item.ssh_key_type | default('ed25519') }}"
    system: "{{ item.system | default(omit) }}"
    uid: "{{ item.uid | default(omit) }}"
    umask: "{{ item.umask | default(omit) }}"
    update_password: "{{ item.update_password | default(omit) }}"
    state: present
  register: _user

- name: Check if authorized_keys file exists for {{ item.username }}
  ansible.builtin.stat:
    path: "{{ [_user.home, '.ssh', 'authorized_keys'] | path_join }}"
  register: _authorized_key_file

- name: Empty authorized_keys file when authorized_keys_exclusive set for {{ item.username }}  # noqa risky-file-permissions
  ansible.builtin.copy:
    content: ""
    dest: "{{ [_user.home, '.ssh', 'authorized_keys'] | path_join }}"
  when:
    - item.authorized_keys_exclusive | default(false)
    - _authorized_key_file.stat.exists
  tags: molecule-idempotence-notest

- name: Add authorized ssh public key for {{ item.username }}
  ansible.posix.authorized_key:
    user: "{{ item.username }}"
    key: "{{ authorized_key }}"
  loop: "{{ item.authorized_keys | default([]) }}"
  loop_control:
    loop_var: "authorized_key"
  tags: molecule-idempotence-notest
